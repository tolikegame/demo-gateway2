server:
  port: 8888

#spring:
#  cloud:
#    gateway:
#      routes:
#        - id: first_route #自訂路由id，唯一鍵
#          uri: https://github.com/ #目標服務網址
#          predicates:
#            - Path=/features #路徑
#            - Path=/foo/{segment} #{segment}任填
#            - After=2018-01-20T06:06:06+08:00[Asia/Shanghai] #2018年1月20日6點6分6秒[亞洲/上海]
#            - Before=2020-01-20T06:06:06+08:00 #也可以不用輸入地區
#            - Between=2018-01-20T06:06:06+08:00, 2020-01-20T06:06:06+08:00
#            - Cookie=QwQ, ouo.k #cookie設定，用postman測試要寫在Headers上
#            - Header=X-Request-Id, \d+ #任意數字
#            - Header=X-Request-Id, abc
#            - Host=**.github.com #寫在Header配置
#            - Method=GET #已確定可以進行"限制"Method訪問，但是設定的Method只有GET可以成功進行訪問
#            - Query=YUY #設定Key,Value，可以只設定Key
#            - Query=O3O,123 #兩種則一設定，如果兩種都一起設定表示兩種參數都要帶

#開啟端點
#management:
#  endpoints:
#    web:
#      exposure:
#        include: '*'
#  security:
#    enabled: false


#filter測試
spring:
  profiles:
    active: add_request_header_route
  cloud:
    gateway:
      routes:
        - id: add_request_header_route
#          uri: http://localhost:8090
          uri: lb://server-provider
#          uri: https://www.gamer.com.tw/
          predicates:
            - Path=/aa/**  #要連到其他微服務的Mapping網址上，需要寫成/**
          filters:
            - AddRequestHeader=X-Request-Foo, Bar #添加Head傳送請求
#            - AddRequestParameter=example, OwO  #添加Parameter傳送請求
#            - AddRequestParameter=key, abc
#            - AddRequestParameter=count, 5
            - RewritePath=/aa/(?<segment>.*), /$\{segment}  #重寫導向到localhost另一個port服務，由localhost:8080/aa/test/head導向到localhost:8090/test/head
#            - StripPrefix=2 #截斷數量，從前面開始算
            - name: Retry
              args:
                retries: 3  #預設為3
                statuses: INTERNAL_SERVER_ERROR  #series跟statuses就是狀態碼跟狀態訊息，擇一即可
#                methods: GET  #預設為GET
#                exceptions: java.io.IOException #指定哪些異常需要重試，預設為
  application:
    name: gateway


#印出log
logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.ipc.netty: DEBUG

#eureka配置-可用可不用，引用spring-cloud-starter-netflix-eureka-client可以自動註冊發現服務
#eureka:
#  client:
#    service-url:
#      defaultZone: http://${eureka.host:127.0.0.1}:${eureka.port:8761}/eureka/
#  instance:
#    prefer-ip-address: true

#配置文件優先級高於使用JPA註解

#Ribbon超時與重試
server-provider:  #artifactId名稱(Module)
  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule  #負載均衡策略-隨機選擇Server
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule  #負載均衡策略-順序選擇Server(預設為此策略)
    ConnectTimeout: 3000 #服务请求连接超时时间（毫秒）
    ReadTimeout: 3000 #服务请求处理超时时间（毫秒）
    MaxAutoRetries: 1 #对第一次请求的服务的重试次数
    MaxAutoRetriesNextServer: 1 #要重试的下一个服务的最大数量（不包括第一个服务）
    OkToRetryOnAllOperations: true #对超时请求启用重试机制

##Ribbon飢餓加載->ribbon接到請求才會創建，飢餓加載是啟動時便會加載
#ribbon:
#  eager-load:
#    enabled: true
#    clients: server-provider, server-provider2